#! /usr/bin/env python
# -*- coding: utf-8 -*-

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

from operator import mul

triangle = number = 1

def canonicalRepresentation(n):
	'''Returns canonical representation of number as a dictionary, key is factor, value is degree'''
	if n == 1: return {1:0}
	factors, d, c = {}, 2, 0
	while d * d <= n:
		if n % d == 0:
			c += 1
			factors[d] = c
			n //= d
		else:
			d += 1
			c = 0
	if n > 1: factors[n] = 1
	return factors

def factorsQuantity(n):
	'''Returns factors quantity for number'''
	return reduce(mul, (i + 1 for i in canonicalRepresentation(n).values()))

while factorsQuantity(triangle) <= 500:
	number += 1
	triangle += number

print triangle
